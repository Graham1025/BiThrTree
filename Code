//***学习线索二叉树，顺便比较递归与迭代的不同，“神使用递归，人使用迭代”***
#include <stdio.h>
#include <stdlib.h>
#define OVERFLOW -1

typedef char TElemType;
typedef enum{ Link, Thread }PointerTag;
typedef struct BiThrNode {
	TElemType data;
	struct BiThrNode *lchild, *rchild;
	PointerTag LTag, RTag;
}BiThrNode, *BiThrTree;

//中序遍历线索化需要用到的全局变量
BiThrTree pre = NULL;

//相关函数
visit(TElemType c) {
	printf("%c", c);
}

//先序次序创建二叉树
void CreateBiThrTree(BiThrTree *T) {
	TElemType c;
	scanf("%c", &c);
	if (' ' == c) (*T) = NULL;
	else
	{
		if (!((*T) = (BiThrTree)malloc(sizeof(BiThrNode)))) exit(OVERFLOW);
		(*T)->data = c;
		(*T)->LTag = (*T)->RTag = Link;
		CreateBiThrTree(&(*T)->lchild);
		CreateBiThrTree(&(*T)->rchild);
	}
}

//中序遍历二叉树
void InOrderTraverse(BiThrTree T) {
	if (T)
	{
		InOrderTraverse(T->lchild);
		visit(T->data);
		InOrderTraverse(T->rchild);
	}
}

//遍历过程线索化
void InThreading(BiThrTree T) {
	if (T)
	{
		InThreading(T->lchild, pre);//左子树线索化
		//本节点的前驱线索（和下面的后继线索不可能同时出现是中序遍历线索化理解的关键）
		if (!T->lchild)
		{
			T->LTag = Thread;
			T->lchild = pre;
		}
		//上一个节点的后继线索
		if (!pre->rchild)
		{
			pre->RTag = Thread;
			pre->rchild = T;
		}
		//保持pre指向T的前驱
		pre = T;
		InThreading(T->rchild);//右子树线索化
	}
}

//中序遍历线索化，其中包含：创建二叉树头节点和遍历过程线索化***该递归过程难以理解，先自己中序遍历写出前驱后继的关系，
//代码递归的思想是：在当前节点层只完成本节点的前驱，或者是前一个节点的后继（也就是说本节点的后继会在下一个节点层面完成），
//所以最后要补充一下最后一个节点的后继信息，即指向头节点，构成双向链表***
InOrderThread(BiThrTree *Thrt, BiThrTree T) {
	//创键线索二叉树头节点，并初始化
	if (!((*Thrt) = (BiThrTree)malloc(sizeof(BiThrNode)))) exit(OVERFLOW);
	(*Thrt)->LTag = Link;
	(*Thrt)->RTag = Thread;
	(*Thrt)->rchild = (*Thrt);//初始化过程，右指针先指向自己
	if (!T)	(*Thrt)->lchild = (*Thrt);//若二叉树为空，头节点左指针回指
	else
	{
		(*Thrt)->lchild = T;//二叉树不为空时，头节点左指针指向二叉树
		//中序遍历过程线索化，pre初始化指向头节点
		pre = (*Thrt);
		InThreading(T);
		//最后一个节点线索化，pre此时代表最后一个叶子节点，这里是补充最后一个节点的后继线索
		pre->rchild = (*Thrt); pre->RTag = Thread;
		(*Thrt)->rchild = pre;
	}
}

//中序遍历线索二叉树，这里主要用的是迭代的思想去遍历，***因为二叉树被线索化了，所以迭代遍历过程不需要用到辅助数据结构类型：堆栈***
void InOrderTraverse_Thr(BiThrTree Thrt) {
	BiThrTree T = Thrt->lchild;
	while (T != Thrt) //循环结束调节，当最后一个指针指向头节点是意味着链表遍历结束
	{
		while (!T->LTag) T = T->lchild;
		visit(T->data);
		while (T->RTag == Thread && T->rchild != Thrt) {
			T = T->rchild; visit(T->data);
		}
		T = T->rchild;
	}
}

int main()
{
	BiThrTree T = NULL;
	printf("请输入二叉树元素：\n");
	CreateBiThrTree(&T);
	printf("\n中序遍历结果为：\n");
	InOrderTraverse(T);

	BiThrTree Thrt = NULL;
	//中序遍历二叉树线索化
	InOrderThread(&Thrt, T);
	printf("\n\n中序遍历线索二叉树结果为：\n");
	InOrderTraverse_Thr(Thrt);
	printf("\n\n");
	getchar();
}
